name: 'Production Deployment'
on:
  pull_request:
    branches:
      - dev
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache node modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: yarn
        run: |
          yarn
      - name: Test
        run: |
          yarn test:ci
      - name: Build
        run: |
          yarn build --prod
      - name: 'Publish to GitHub Packages'
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: thinc-org/open-reg-frontend/open-reg-frontend-production
          registry: docker.pkg.github.com
          username: thinc-openreg
          password: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: Dockerfile
          tags: latest
      - name: 'Deploy to VM'
        uses: appleboy/ssh-action@master
        env:
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: 'production'
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASS }}
          port: ${{ secrets.VM_PORT }}
          envs: GITHUB_USERNAME, GITHUB_TOKEN, NODE_ENV
          script: |
            sh ./deploy.sh -e production -s api -u $GITHUB_USERNAME -t $GITHUB_TOKEN
