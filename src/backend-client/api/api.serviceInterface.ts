/**
 * Open Registration API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders } from '@angular/common/http';

import { Observable } from 'rxjs/Observable';

import { AddMemberDTO } from '../model/addMemberDTO';
import { AuthToken } from '../model/authToken';
import { CreateEventDTO } from '../model/createEventDTO';
import { CreateOrganizationDTO } from '../model/createOrganizationDTO';
import { CreateUserDTO } from '../model/createUserDTO';
import { Event } from '../model/event';
import { Organization } from '../model/organization';
import { OrganizationMember } from '../model/organizationMember';
import { SetTagsDTO } from '../model/setTagsDTO';
import { UserDTO } from '../model/userDTO';

import { Configuration } from '../configuration';

export interface ApiServiceInterface {
  defaultHeaders: HttpHeaders;
  configuration: Configuration;

  /**
   *
   *
   */
  authControllerCurrentUser(extraHttpRequestParams?: any): Observable<{}>;

  /**
   * Sign in
   *
   */
  authControllerLogin(extraHttpRequestParams?: any): Observable<AuthToken>;

  /**
   * Create an event
   *
   * @param body
   */
  eventControllerCreateEvent(body: CreateEventDTO, extraHttpRequestParams?: any): Observable<Event>;

  /**
   * List all events
   *
   */
  eventControllerFindAll(extraHttpRequestParams?: any): Observable<Array<Event>>;

  /**
   * List tags of an event
   *
   * @param id
   */
  eventControllerFindAllTags(id: string, extraHttpRequestParams?: any): Observable<Array<string>>;

  /**
   * Find an event from ID
   *
   * @param id
   */
  eventControllerFindById(id: string, extraHttpRequestParams?: any): Observable<Event>;

  /**
   * Set tags of an event
   *
   * @param body
   * @param id
   */
  eventControllerSetTags(
    body: SetTagsDTO,
    id: string,
    extraHttpRequestParams?: any
  ): Observable<Array<string>>;

  /**
   * Add a user to an organization
   *
   * @param body
   * @param id
   */
  organizationControllerAddMember(
    body: AddMemberDTO,
    id: string,
    extraHttpRequestParams?: any
  ): Observable<Array<OrganizationMember>>;

  /**
   * Create an organization
   *
   * @param body
   */
  organizationControllerCreateOrganization(
    body: CreateOrganizationDTO,
    extraHttpRequestParams?: any
  ): Observable<Organization>;

  /**
   * List all organizations
   *
   */
  organizationControllerFindAll(extraHttpRequestParams?: any): Observable<Array<Organization>>;

  /**
   * List all members in an organization
   *
   * @param id
   */
  organizationControllerGetMembers(
    id: string,
    extraHttpRequestParams?: any
  ): Observable<Array<OrganizationMember>>;

  /**
   * Remove a user from an organization
   *
   * @param id
   * @param memberid
   */
  organizationControllerRemoveMember(
    id: string,
    memberid: string,
    extraHttpRequestParams?: any
  ): Observable<Array<OrganizationMember>>;

  /**
   * Create a user
   *
   * @param body
   */
  userControllerCreate(body: CreateUserDTO, extraHttpRequestParams?: any): Observable<UserDTO>;

  /**
   * List all users
   *
   */
  userControllerFindAll(extraHttpRequestParams?: any): Observable<Array<UserDTO>>;

  /**
   * Find a user from ID
   *
   * @param id
   */
  userControllerFindById(id: string, extraHttpRequestParams?: any): Observable<UserDTO>;
}
